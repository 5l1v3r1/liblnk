.Dd June 28, 2010
.Dt liblnk 3
.Os liblnk
.Sh NAME
.Nm liblnk.h
.Nd Library to support the Windows Shortcut File (LNK) format
.Sh LIBRARY
.Lb liblnk
.Sh SYNOPSIS
.In liblnk.h
.Pp
Support functions
.Ft const char *
.Fn liblnk_get_version "void"
.Ft int
.Fn liblnk_check_file_signature "const char *filename, liblnk_error_t **error"
.Pp
Available when compiled with wide character string support:
.Ft int
.Fn liblnk_check_file_signature_wide "const wchar_t *filename, liblnk_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn liblnk_check_file_signature_file_io_handle "libbfio_handle_t *bfio_handle, liblnk_error_t **error"
.Pp
Notify functions
.Ft void
.Fn liblnk_notify_set_verbose "int verbose"
.Ft int
.Fn liblnk_notify_set_stream "FILE *stream, liblnk_error_t **error"
.Ft int
.Fn liblnk_notify_stream_open "const char *filename, liblnk_error_t **error"
.Ft int
.Fn liblnk_notify_stream_close "liblnk_error_t **error"
.Pp
Error functions
.Ft void 
.Fn liblnk_error_free "liblnk_error_t **error"
.Ft int
.Fn liblnk_error_fprint "liblnk_error_t *error, FILE *stream"
.Ft int
.Fn liblnk_error_sprint "liblnk_error_t *error, char *string, size_t size"
.Ft int 
.Fn liblnk_error_backtrace_fprint "liblnk_error_t *error, FILE *stream"
.Ft int
.Fn liblnk_error_backtrace_sprint "liblnk_error_t *error, char *string, size_t size"
.Pp
File functions
.Ft int
.Fn liblnk_file_initialize "liblnk_file_t **file, liblnk_error_t **error"
.Ft int
.Fn liblnk_file_free "liblnk_file_t **file, liblnk_error_t **error"
.Ft int
.Fn liblnk_file_open "liblnk_file_t *file, const char *filename, int flags, liblnk_error_t **error"
.Ft int
.Fn liblnk_file_close "liblnk_file_t *file, liblnk_error_t **error"
.Ft int
.Fn liblnk_file_get_ascii_codepage "liblnk_file_t *file, int *ascii_codepage, liblnk_error_t **error"
.Ft int
.Fn liblnk_file_set_ascii_codepage "liblnk_file_t *file, int ascii_codepage, liblnk_error_t **error"
.Pp
Available when compiled with wide character string support:
.Ft int
.Fn liblnk_file_open_wide "liblnk_file_t *file, const wchar_t *filename, int flags, liblnk_error_t **error"
.Pp
Available when compiled with libbfio support:
.Ft int
.Fn liblnk_file_open_file_io_handle "liblnk_file_t *file, libbfio_handle_t *file_io_handle, int flags, liblnk_error_t **error"
.Pp
Link information functions
.Ft int
.Fn liblnk_file_get_data_flags "liblnk_file_t *file, uint32_t *data_flags, liblnk_error_t **error"
.Ft int
.Fn liblnk_file_link_refers_to_file "liblnk_file_t *file, liblnk_error_t **error"
.Ft int
.Fn liblnk_file_get_file_attribute_flags "liblnk_file_t *file, uint32_t *file_attribute_flags, liblnk_error_t **error"
.Ft int
.Fn liblnk_file_get_file_creation_time "liblnk_file_t *file, uint64_t *creation_time, liblnk_error_t **error"
.Ft int
.Fn liblnk_file_get_file_modification_time "liblnk_file_t *file, uint64_t *modification_time, liblnk_error_t **error"
.Ft int
.Fn liblnk_file_get_file_access_time "liblnk_file_t *file, uint64_t *access_time, liblnk_error_t **error"
.Ft int
.Fn liblnk_file_get_file_size "liblnk_file_t *file, uint32_t *file_size, liblnk_error_t **error"
.Ft int
.Fn liblnk_file_get_utf8_local_path_size "liblnk_file_t *file, size_t *utf8_string_size, liblnk_error_t **error"
.Ft int
.Fn liblnk_file_get_utf8_local_path "liblnk_file_t *file, uint8_t *utf8_string, size_t utf8_string_size, liblnk_error_t **error"
.Ft int
.Fn liblnk_file_get_utf8_network_path_size "liblnk_file_t *file, size_t *utf8_string_size, liblnk_error_t **error"
.Ft int
.Fn liblnk_file_get_utf8_network_path "liblnk_file_t *file, uint8_t *utf8_string, size_t utf8_string_size, liblnk_error_t **error"
.Sh DESCRIPTION
The
.Fn liblnk_get_version
function is used to retrieve the library version.
.Sh RETURN VALUES
Most of the functions return NULL or -1 on error, dependent on the return type. For the actual return values refer to liblnk.h
.Sh ENVIRONMENT
None
.Sh FILES
None
.Sh NOTES
liblnk uses UTF-8 encoded strings except for filenames.

ASCII strings in a LNK file contain an extended ASCII string using the codepage of the system it was created on. The function
.Ar liblnk_set_ascii_codepage
 allows to set the required codepage for reading and writing. The default codepage is ASCII and replaces all extended characters to the Unicode replacement character (U+fffd) when reading and the ASCII substitude character (0x1a) when writing.

liblnk allows to be compiled with wide character support.
To compile liblnk with wide character support use
.Ar ./configure --enable-wide-character-type=yes
or pass the definition
.Ar HAVE_WIDE_CHARACTER_TYPE
 to the compiler (i.e. in case of Microsoft Visual Studio (MSVS) C++).

To have other code to determine if liblnk was compiled with wide character support it defines
.Ar LIBLNK_HAVE_WIDE_CHARACTER_TYPE
 in liblnk/features.h.

liblnk allows to be compiled with chained IO support using libbfio.
liblnk will automatically detect if a compatible version of libbfio is available.

To have other code to determine if liblnk was compiled with libbfio support it defines
.Ar LIBLNK_HAVE_BFIO
 in liblnk/features.h.

.Sh BUGS
Please report bugs of any kind to <jbmetz@users.sourceforge.net> or on the project website:
http://liblnk.sourceforge.net/
.Sh AUTHOR
These man pages were written by Joachim Metz.
.Sh COPYRIGHT
Copyright (c) 2009-2010, Joachim Metz <jbmetz@users.sourceforge.net>.
This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.Sh SEE ALSO
the liblnk.h include file
